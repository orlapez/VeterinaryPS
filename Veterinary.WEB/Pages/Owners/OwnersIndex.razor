@page "/owners"
@using Veterinary.Shared.Entities
@using Veterinary.WEB.Repositories
@using Veterinary.WEB.Shared


@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal



<h1>OwnersIndex</h1>

@if (Owners is null)
{
    <div class="spinner"/>
}
else
{





<GenericList MyList="Owners">

    <Body>

    <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-globe"></i> Owners 
                        <a class="btn btn-sm btn-primary float-end" href="/Owners/create"><i class="oi oi-plus"></i> Crear Owner</a>
                    </span>
                </div>
                <div class="card-body">
                    <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                    </div>
                </div>
                </div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Owner</th>


                </tr>
            </thead>
            <tbody>
                @foreach (var owner in Owners!)
                {
                    <tr>

                        <td>
                            @owner.Document
                        </td>
                        <td>
                            @owner.FirstName
                        </td>


                        <td>
                            @owner.LastName
                        </td>


                        <td>
                            @owner.FixedPhone
                        </td>

                        <td>
                            @owner.CellPhone
                        </td>

                        <td>
                            @owner.Address
                        </td>



                        <td>
                                <a href="/Owners/edit/@owner.Id" class="btn btn-warning btn-sm"><i class="oi oi-pencil" /> Editar</a>
                                <button class="btn btn-danger btn-sm" @onclick=@(() => DeleteAsync(owner))><i class="oi oi-trash" /> Borrar</button>


                        </td>


                    </tr>
                }
            </tbody>
        </table>

    </Body>

</GenericList>
}




@code {


    public List<Owner> Owners { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await Load();
    }

    private async Task Load()
    {
        var responseHppt = await repository.GetAsync<List<Owner>>("/api/Owners");
        Owners = responseHppt.Response!;
    }

    private async Task DeleteAsync(Owner Owner)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Esta seguro que quieres borrar el registro?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHTTP = await repository.DeleteAsync<Owner>($"api/Owners/{Owner.Id}");

        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var mensajeError = await responseHTTP.GetErrorMessageAsync();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}